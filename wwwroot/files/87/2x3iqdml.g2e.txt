
Системный администратор, программист С#

В entity framework есть модель 
public class Document
    {
        public long Id { get; set; }
        [Display(Name = "Заголовок")]
        [MaxLength(100)]
        public string Title { get; set; }
        public int CategoryId { get; set; }
        [Display(Name = "Категория")]
        public Category Category { get; set; }
        [Display(Name = "Закон")]
        public virtual ICollection<Law>? Laws { get; set; }
    }


 public async Task<IActionResult> Edit(long? id)
        {
            if (id == null || _context.Documents == null)
            {
                return NotFound();
            }
            var document = await _context.Documents.FindAsync(id);
            
            if (document == null)
            {
                return NotFound();
            }
            ViewBag.Category = _context.Categories.ToList();
             ViewBag.Laws = _context.Laws.ToList();
            return View(document);
        }

        // POST: Documents/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(long id, [Bind("Id,Title,CategoryId,Laws")] Models.Document document, int[] Laws)
        {
            if (id != document.Id)
            {
                return NotFound();
            }
            if (ModelState.IsValid)
            {
                try
                {
                    // Обновление поля Laws модели Document
                    if (Laws != null)
                    {
                        document.Laws = new List<Law>();
                        foreach (var lawId in Laws)
                        {
                            var law = await _context.Laws.FirstOrDefaultAsync(l => l.Id == lawId);
                            if (law != null)
                            {
                                document.Laws.Add(law);
                            }
                        }
                    }
                    // Сохраняем изменения в базе данных
                    _context.Update(document); 
                    _context.Entry(document).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Details", new { id = document.Id });
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!DocumentExists(document.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                // return RedirectToAction(nameof(Index));
            }
            ViewBag.Category = _context.Categories.ToList();
            ViewBag.Laws = _context.Laws.ToList();
            return View(document);
        }